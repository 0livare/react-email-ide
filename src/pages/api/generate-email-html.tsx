// Next.js API route support: https://nextjs.org/docs/api-routes/introduction
import type { NextApiRequest, NextApiResponse } from 'next'
import { render as renderMjml, type MjmlError } from 'mjml-react'
import kebabCase from 'lodash/kebabCase'
// @ts-ignore
import Handlebars from 'handlebars/dist/handlebars'

import * as Emails from '~/emails'

export type ResponseData = {
  rawHtml?: string
  html?: string
  errors?: MjmlError[] | any[]
}

export default function handler(req: NextApiRequest, res: NextApiResponse<ResponseData>) {
  const componentName = req.query.componentName as string

  const projectName = kebabCase(componentName.split('_')[0])
  const fileName = kebabCase(componentName.split('_')[1])
  const remoteRepoUrl = `https://github.com/<user>/<repo>/src/main/src/emails/${projectName}/${fileName}/${fileName}.tsx`

  // @ts-ignore
  const EmailComponent = Emails[componentName]
  // @ts-ignore
  const sampleData = Emails[componentName + '_SampleData']

  if (!EmailComponent) {
    const html = 'Not found'
    return res.status(404).send({ html, rawHtml: html })
  }

  try {
    const { html, errors } = renderMjml(<EmailComponent />, {
      validationLevel: 'soft',
      minify: false,
      beautify: true,
    })

    const rawHtml = generateDocsComment(remoteRepoUrl) + html

    let htmlWithSampleData = rawHtml
    if (sampleData) {
      // SendGrid has these pre-registered in their Handlebars implementation.
      // See: https://docs.sendgrid.com/for-developers/sending-email/using-handlebars#handlebars-reference
      //
      // There are more helpers that handlebars supports that we could also
      // create components for.
      // See: https://docs.sendgrid.com/for-developers/sending-email/using-handlebars#conditional-statements

      Handlebars.registerHelper('and', (one: any, two: any) => one && two)
      Handlebars.registerHelper('or', (one: any, two: any) => one || two)

      const template = Handlebars.compile(rawHtml)
      htmlWithSampleData = template(sampleData)
    }

    return errors?.length
      ? res.status(500).json({ errors })
      : res.status(200).send({ rawHtml, html: htmlWithSampleData })
  } catch (e) {
    // @ts-ignore
    const msg = e.message
    return res.status(400).json({ errors: [msg] })
  }
}

function generateDocsComment(bitBucketFileUrl: string) {
  return `<!-- 
  This template was generated by Skyslope Emails: https://bitbucket.org/skyslope/skyslope-emails

  Please don't edit this generated HTML directly, instead, edit the  
  source and regenerate the HTML so that future iterations will also 
  contain your changes.

  Source for this template: ${bitBucketFileUrl}
-->
`
}
